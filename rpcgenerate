#!/usr/bin/python3

import subprocess
import json
import sys
import os

TODO = "\t" + "//TODO\n"
OPEN = "{\n"
CLOSE = "}\n"

"""
Calls the necessary functions to generate proxy and stub files.
"""
def run():
    filename, decls = parse_idl()
    filename = filename.split(".")[0]
    write_header(filename, "proxy")
    write_header(filename, "stub")
    write_proxy_fn(filename, decls)
    write_stub_fn(filename, decls)

"""
Parses declarations in the idl file into a dictionary.
"""
def parse_idl():
    IDL_TO_JSON_EXECUTABLE = './idl_to_json'
    try:
        # Make sure invoked properly
        if len(sys.argv) != 2:
            print("Wrong number of arguments", file=sys.stderr)
            raise Exception
        # Make sure IDL file exists and is readable
        filename = sys.argv[1]
        if (not os.path.isfile(filename)):
            print("Path %s does not designate a file" % filename, file=sys.stderr)
            raise Exception
        if (not os.access(filename, os.R_OK)):
            print("File %s is not readable" % filename, file=sys.stderr)
            raise Exception 
        # Make sure idl_to_json exists and is executable
        if (not os.path.isfile(IDL_TO_JSON_EXECUTABLE)):
            print("Path %s does not designate a file...run \"make\" to create it" % 
                IDL_TO_JSON_EXECUTABLE, file=sys.stderr)
            raise Exception
        if (not os.access(IDL_TO_JSON_EXECUTABLE, os.X_OK)):
            print("File %s exists but is not executable" % 
                IDL_TO_JSON_EXECUTABLE, file=sys.stderr)
            raise Exception
        # Parse declarations into a Python dictionary
        decls = json.loads(subprocess.check_output([IDL_TO_JSON_EXECUTABLE, filename]).decode('utf-8'))
        return filename, decls
    except Exception as e:
        print("Usage: %s <idlfilename>" % sys.argv[0], file=sys.stderr)
        sys.exit()

"""
Writes header text to stub or proxy file, creating the file if
it doesn't exist, overwriting the file if it already
exists.
"""
def write_header(filename, stubOrProxy):
    header = "//"+filename+"."+stubOrProxy+".cpp\n//authors: Jialu Wei, Remmy Chen\n"
    includes = ("#include <string>\n"
                "using namespace std;\n"
                "#include \"" + filename + ".idl\"\n"
                "#include \"rpc" + stubOrProxy + "helper.h\"\n"
                "#include <cstdio>\n"
                "#include <cstring>\n"
                "#include \"c150debug.h\"\n"
                "#include <iostream>\n"
                "#include <vector>\n"
                "using namespace C150NETWORK;\n")
    defines = "#define INT_LEN 4\n#define FLOAT_LEN 4\n"
    structs = "struct Buffer_info " + OPEN + "\tchar *buf;\n\tint buf_len;\n" + "};\n"
    with open(filename+"."+stubOrProxy+".cpp", 'w+') as f:
        f.write('%s\n' % header)
        f.write('%s\n' % includes)
        f.write('%s\n' % defines)
        f.write('%s\n' % structs)
        f.close()

"""
Appends functions to proxy file.
3 types of functions:
    - remote calls 
    - deserializers
    - serializers
"""
def write_proxy_fn(filename, decls):
    with open(filename+".proxy.cpp", 'a+') as f:
        typeSet, structArr = getTypeSet(decls)
        writeSerializersAndDeserializers(typeSet, structArr, f, "PROXY")
        for name, sig in decls["functions"].items():
            args = sig["arguments"]
            retType = sig["return_type"]
            writeFnRemoteCalls(name, args, retType, f)
    f.close()

"""
Gets the types specified in function arguments, function return, and
structs, including struct members. 
3 categories of types:
    - primitives : void, string, int, float
    - type in arrays : primitive or struct
    - structs : user-defined
"""
def getTypeSet(decls):
    typeSet = set()
    typeSet.add("int") # always need int serializer and deserializer
    typeSet.add("string") # always need string serializer and deserializer
    structArr = []
    for name, sig in decls["functions"].items():
        args = sig["arguments"]
        for arg in args:
            typeSet.add(arg["type"])
        typeSet.add(sig["return_type"])
    for name, sig in decls["types"].items():
        typeOfType = sig["type_of_type"]
        if typeOfType == "struct":
            typeSet.add(name)
            members = sig["members"]
            structDets = {"structName" : name, 'memName' : [], 'memType' : []}
            for member in members:
                typeSet.add(member["type"])
                structDets["memName"].append(member["name"])
                structDets["memType"].append(member["type"])
            structArr.append(structDets)
        elif typeOfType == "array":
            typeSet.add(name)
            typeSet.add(sig["member_type"])
    return typeSet, structArr

"""
Writes code for serializers and deserializers into given file. 
Forward declarations are included so as not have to be 
concerned about the order of function definition.
"""
def writeSerializersAndDeserializers(typeSet, structArr, f, stubOrProxy):
    serializers = ""
    deserializers = ""
    for typeOfType in typeSet:
        if typeOfType == "int" or typeOfType == "string" or typeOfType == "float" or typeOfType == "void":
            serializer, serializerContract = genBuiltInSerializer(typeOfType)
            serializers += serializer
            f.write('%s\n' % serializerContract)
            deserializer, deserializerContract = genBuiltInDeserializer(typeOfType, stubOrProxy)
            deserializers += deserializer
            f.write('%s\n' % deserializerContract)
        elif typeOfType.startswith("__"):
            serializer, serializerContract = genArraySerializer(typeOfType)
            serializers += serializer
            f.write('%s\n' % serializerContract)
            deserializer, deserializerContract = genArrayDeserializer(typeOfType)
            deserializers += deserializer
            f.write('%s\n' % deserializerContract)
        else:
            serializer, serializerContract = genStructSerializer(typeOfType, structArr)
            serializers += serializer
            f.write('%s\n' % serializerContract)
            deserializer, deserializerContract = genStructDeserializer(typeOfType, structArr)
            deserializers += deserializer
            f.write('%s\n' % deserializerContract)
    f.write('%s\n' % serializers)
    f.write('%s\n' % deserializers)

"""
Generates serializer code for given struct name in stub and proxy
files, excluding the serializer code for its members - this is done in 
writeSerializersAndDeserializers to avoid redundant code.
"""
def genStructSerializer(typeOfType, structArr):
    serializerBody = ""
    for struct in structArr:
        if struct["structName"] == typeOfType:
            memNames = struct["memName"]
            memTypes = struct["memType"]
            for memName, memType in zip(memNames, memTypes):
                memType = memType.replace('][', '_').replace('[', '_').replace(']', '_')
                serializerBody += "\t" + memType + "_serializer(b, " + typeOfType[0] + "1." + memName + ");\n"
    serializer = ("void " + typeOfType + "_serializer(struct Buffer_info *b, " + typeOfType + " " + typeOfType[0] + "1) " + OPEN + 
                    serializerBody + CLOSE)
    serializerContract = "void " + typeOfType + "_serializer(struct Buffer_info *b, " + typeOfType + " " + typeOfType[0] + "1);\n"
    return serializer, serializerContract

"""
Generates deserializer code for given struct type name in stub and
proxy files, excluding the deserializer code for its members - this 
is done in writeSerializersAndDeserializers to avoid redundant code.
"""
def genStructDeserializer(typeOfType, structArr):
    var = typeOfType[0] + "1"
    deserializerBody = ""
    for struct in structArr:
        if struct["structName"] == typeOfType:
            memNames = struct["memName"]
            memTypes = struct["memType"]
            for memName, memType in zip(memNames, memTypes):
                if memType == "string" or memType == "int" or memType == "float":
                    deserializerBody += "\t" + var + "->" + memName + " = "  + memType + "_deserializer();\n"
                else:
                    if '[' in memType:
                        memType = memType.replace('][', '_').replace('[', '_').replace(']', '_')
                        deserializerBody += "\t" + memType + "_deserializer(" + var + "->" + memName  + ");\n"
                    else:
                        deserializerBody += "\t" + memType + "_deserializer(&(" + var + "->" + memName  + "));\n"
    deserializer = ("void " + typeOfType + "_deserializer(" + typeOfType + " *" + var + ") " + OPEN + 
                    deserializerBody + CLOSE)
    deserializerContract = "void " + typeOfType + "_deserializer(" + typeOfType + " *" + var + ");\n"
    return deserializer, deserializerContract

"""
Generates serializer code for given array type in stub and proxy files.
"""
def genArraySerializer(typeOfType):
    arrSizesString = '[' + typeOfType.split('[', 1)[1]
    typeOfType = typeOfType.replace('][', '_').replace('[', '_').replace(']', '_')
    arrType = [s for s in typeOfType.split('_') if s.isalpha()][0]
    arrSizes = [int(s) for s in typeOfType.split('_') if s.isdigit()]
    idx = 0
    tab = ""
    serializerBody = ""
    varsList = []
    for size in arrSizes:
        var = "i" + str(idx)
        varsList.append(var)
        serializerBody += (tab + "\tfor (int " + var +  " = 0; " + var + " < " + str(size) + "; " + var + "++) {\n")
        idx += 1
        tab += "\t"
    arrVarsString = ""
    for var in varsList:
        arrVarsString += '[' + var + ']'
    serializerBody += tab + "\t" + arrType + "_serializer(b, arr" + arrVarsString + ");\n"
    for size in arrSizes:
        serializerBody += (tab + "}\n")
        tab = tab[:-2]
    serializer = ("void " + typeOfType + "_serializer(struct Buffer_info *b, " + arrType + " arr" + arrSizesString + ") " + OPEN + 
                    serializerBody + CLOSE)
    serializerContract = "void " + typeOfType + "_serializer(struct Buffer_info *b, " + arrType + " arr" + arrSizesString + ");\n"
    return serializer, serializerContract

"""
Generates deserializer code for given array type in stub and proxy files.
"""
def genArrayDeserializer(typeOfType):
    arrSizesString = '[' + typeOfType.split('[', 1)[1]
    typeOfType = typeOfType.replace('][', '_').replace('[', '_').replace(']', '_')
    arrType = [s for s in typeOfType.split('_') if s.isalpha()][0]
    arrSizes = [int(s) for s in typeOfType.split('_') if s.isdigit()]
    idx = 0
    tab = ""
    deserializerBody = ""
    varsList = []
    for size in arrSizes:
        var = "i" + str(idx)
        varsList.append(var)
        deserializerBody += (tab + "\tfor (int " + var +  " = 0; " + var + " < " + str(size) + "; " + var + "++) {\n")
        idx += 1
        tab += "\t"
    arrVarsString = ""
    for var in varsList:
        arrVarsString += '[' + var + ']'
    if arrType == "string" or arrType == "float" or arrType == "int":
        deserializerBody += tab + "\tarr" + arrVarsString + " = " + arrType + "_deserializer();\n"
    else: # definitely a struct (as the most underlying type of an array)
        deserializerBody += tab + "\t" + arrType + "_deserializer(&(arr" + arrVarsString  + "));\n"
    for size in arrSizes:
        deserializerBody += (tab + "}\n")
        tab = tab[:-1]
    deserializer = ("void " + typeOfType + "_deserializer(" + arrType + " arr" + arrSizesString + ") " + OPEN + 
                    deserializerBody + CLOSE)
    deserializerContract = "void " + typeOfType + "_deserializer(" + arrType + " arr" + arrSizesString + ");\n"
    return deserializer, deserializerContract

"""
Generates serializer code for primitives in stub and proxy files.
"""
def genBuiltInSerializer(typeOfType):
    serializer = ""
    serializerContract = ""
    if typeOfType == "int":
        serializer = ("void int_serializer(struct Buffer_info *b, int i) " + OPEN +
                        "\tint converted = htonl(i);\n"
                        "\tint new_buf_len;\n"
                        "\tchar *new_buf;\n"
                        "\tnew_buf_len = b->buf_len + INT_LEN;\n"
                        "\tnew_buf = (char*) malloc(new_buf_len);\n"
                        "\tmemcpy(new_buf, b->buf, b->buf_len);\n"
                        "\tmemcpy(new_buf+b->buf_len, (char*)&converted, INT_LEN);\n"
                        #"\tfree(b->buf);\n"
                        "\tb->buf = new_buf;\n"
                        "\tb->buf_len = new_buf_len;\n" + CLOSE)
        serializerContract = "void int_serializer(struct Buffer_info *b, int i);\n"
    elif typeOfType == "string":
        serializer = ("void string_serializer(struct Buffer_info *b, string s) " + OPEN + 
                        "\tint_serializer(b, s.length());\n"
                        "\tint new_buf_len;\n"
                        "\tchar *new_buf;\n"
                        "\tnew_buf_len = b->buf_len + s.length();\n"
                        "\tnew_buf = (char*) malloc(new_buf_len);\n"
                        "\tmemcpy(new_buf, b->buf, b->buf_len);\n"
                        "\tmemcpy(new_buf+b->buf_len, s.c_str(), s.length());\n"
                        #"\tfree(b->buf);\n"
                        "\tb->buf = new_buf;\n"
                        "\tb->buf_len = new_buf_len;\n" + CLOSE)
        serializerContract = "void string_serializer(struct Buffer_info *b, string s);\n"
    elif typeOfType == "float":
        serializer = ("void float_serializer(struct Buffer_info *b, float f) " + OPEN +
                        "\tstring s = to_string(f);\n"
                        "\tstring_serializer(b, s);\n" + CLOSE)
        serializerContract = "void float_serializer(struct Buffer_info *b, float f);\n"
    return serializer, serializerContract

"""
Generates deserializer code for primitives in stub and proxy files.
"""
def genBuiltInDeserializer(typeOfType, stubOrProxy):
    deserializer = ""
    deserializerContract = ""
    if typeOfType == "int":
        deserializer = ("int int_deserializer() " + OPEN +
                        "\tchar buf[INT_LEN];\n"
                        "\tint res;\n"
                        "\tint readlen = RPC" + stubOrProxy + "SOCKET->read(buf, INT_LEN);\n"
                        "\tif (readlen == 0) {\n"
                        "\t\treturn -1;\n"
                        "\t} else if (readlen < 0) {\n"
                        "\t\tperror(\"readerror\");\n"
                        "\t\texit(1);\n"
                        "\t} else {\n"
                        "\t\tmemcpy(&res, buf, INT_LEN);\n"
                        "\t\treturn ntohl(res);\n" 
                        "\t}\n"
                        + CLOSE)
        deserializerContract = "int int_deserializer();\n"
    elif typeOfType == "string":
        deserializer = ("string string_deserializer() " + OPEN + 
                        "\tint str_len = int_deserializer();\n"
                        "\tif (str_len > 0) {\n"
                        "\t\tchar buf[str_len];\n"
                        "\t\tint readlen = RPC" + stubOrProxy + "SOCKET->read(buf, str_len);\n"
                        "\t\tif (readlen == 0) {\n"
                        "\t\t\treturn \"\";\n"
                        "\t\t} else if (readlen < 0) {\n"
                        "\t\t\tperror(\"read error\");\n"
                        "\t\t\texit(1);\n"
                        "\t\t} else {\n"
                        "\t\t\tstring res(buf, str_len);\n"
                        "\t\t\treturn res;\n" 
                        "\t\t}\n"
                        "\t} else {\n"
                        "\t\treturn \"\";\n"
                        "\t}\n"
                        + CLOSE)
        deserializerContract = "string string_deserializer();\n"
    elif typeOfType == "float":
        deserializer = ("float float_deserializer() " + OPEN +
                        "\tstring s = string_deserializer();\n"
                        "\tif (s.compare(\"\")==0) {\n"
                        "\t\treturn -1;\n"
                        "\t} else {\n"
                        "\treturn atof(s.c_str());\n" 
                        "\t}\n"
                        + CLOSE)
        deserializerContract = "float float_deserializer();\n"
    return deserializer, deserializerContract

"""
Generates remote function calls in proxy files.
"""
def writeFnRemoteCalls(typeOfType, args, retType, f):
    argstring = ""
    serializeargs = ""
    comma = ""
    for a in args:
        argType = a["type"]
        argName = a["name"]
        argTypeClean = ""
        if '[' in argType:
            argInnerType, argSizeBracket = arrTypeParse(argType)
            argstring += comma + argInnerType + ' ' + argName + argSizeBracket
        else:
            argstring += comma + argType + ' ' + argName
        argType = argType.replace('][', '_').replace(']', '_').replace('[', '_')
        serializeargs += argType + "_serializer(&b, " + argName + ");\n\t"
        comma = ", "
    
    fnend = ("\t" + retType + " res;\n"
             "\t" + retType + "_deserializer(&res);\n"
            "\treturn res;\n")
    if retType == "string" or retType == "int" or retType == "float":
        fnend = ("\t" + retType + " res = " + retType + "_deserializer();\n"
                "\treturn res;\n")
    elif retType == "void":
        fnend = ("\tstring res = string_deserializer();\n"
                 "\tif (res.compare(\"DONE\")!=0) {\n"
                 "\t\tthrow C150Exception(\"simplefunction.proxy: func1() received invalid response from the server\");\n"
                 "\t}\n")
    fnbody = ("\tstruct Buffer_info b;\n"
                "\tb.buf = (char*) malloc(1);\n"
                "\tb.buf_len = 0;\n"
                "\tstring_serializer(&b, \"" + typeOfType + "\");\n"
                "\t" + serializeargs +
                "RPCPROXYSOCKET->write(b.buf, b.buf_len);\n"
                #"\tfree(b.buf);\n"
                + fnend)
    fnremotecall = retType + " " + typeOfType + "(" + argstring + ") " + OPEN + fnbody + CLOSE
    f.write('%s\n' % fnremotecall)

"""
Parses array types. In idl_to_json, the formatting
of arrays appears as something like __int[10][4]. 
Something like int and [10][4] are returned.
"""
def arrTypeParse(argType):
    argTypeClean = argType[2:]
    argInnerType = argTypeClean.split('[', 1)[0]
    argSizeBracket = '[' + argTypeClean.split('[', 1)[1]
    return argInnerType, argSizeBracket

"""
Appends functions to stub file.
4 types of functions:
    - local calls 
    - deserializers (handlers)
    - serializers (pack)
    - dispatcher (invokes local function)
"""
def write_stub_fn(filename, decls):
    with open(filename+".stub.cpp", 'a+') as f:
        typeSet, structArr = getTypeSet(decls)
        writeSerializersAndDeserializers(typeSet, structArr, f, "STUB")
        dispatcherDeserializers = ""
        for name, sig in decls["functions"].items():
            args = sig["arguments"]
            retType = sig["return_type"]
            writeFnLocalCalls(name, args, retType, f)
            argnamestring = ', '.join([a["name"] for a in args])
            argDeserializers = ""
            for arg in args:
                if arg["type"] == "string" or arg["type"] == "int" or arg["type"] == "float":
                    argDeserializers += ("\t\t\t" + arg["type"] + " " + arg["name"] + " = " + arg["type"] + "_deserializer();\n")
                elif '[' in arg["type"]:
                    argInnerType, argSizeBracket = arrTypeParse(arg["type"])
                    argDeserializers += ("\t\t\t" + argInnerType + " " + arg["name"] + argSizeBracket + ";\n\t\t\t" + arg["type"].replace('][', '_').replace(']', '_').replace('[', '_') + "_deserializer(" + arg["name"] + ");\n")
                else:
                    argDeserializers += ("\t\t\t" + arg["type"] + " " + arg["name"] + ";\n\t\t\t" + arg["type"].replace('][', '_').replace(']', '_').replace('[', '_') + "_deserializer(&(" + arg["name"] + "));\n")
            argDeserializers += "\t\t\t__" + name + "(" + argnamestring + ");\n"
            dispatcherDeserializers += ("\t\telse if (func_name.compare(\"" + name + "\")==0) " + OPEN + argDeserializers + "\t\t" + CLOSE)
        dispatcherbody = ("\tif (!RPCSTUBSOCKET->eof()) " + OPEN +
                            "\t\tstring func_name = string_deserializer();\n"
                            "\t\tif (func_name.compare(\"\")==0) return;\n" + 
                            dispatcherDeserializers + 
                            "\t\telse " + OPEN + "\t\t\tthrow C150Exception(\"Error: invalid function.\");\n\t\t"  + CLOSE +
                            "\t" + CLOSE)
        dispatcher = "void dispatchFunction() " + OPEN + dispatcherbody + CLOSE
        f.write('%s\n' % dispatcher)
    f.close()

"""
Generates local function calls in stub files.
"""
def writeFnLocalCalls(typeOfType, args, retType, f):
    argstring = ""
    comma = ""
    for a in args:
        argType = a["type"]
        argName = a["name"]
        if '[' in argType:
            argInnerType, argSizeBracket = arrTypeParse(argType)
            argstring += comma + argInnerType + ' ' + argName + argSizeBracket
        else:
            argstring += comma + argType + ' ' + argName
        comma = ", "
    argnamestring = ', '.join([a["name"] for a in args])
    fncall = "\t" + retType + " res = " + typeOfType + "(" + argnamestring + ");\n"
    fncall2 = "\t" + retType + "_serializer(&b, res);\n"
    if retType == "void":
        fncall = "\t" + typeOfType + "(" + argnamestring + ");\n\tstring res = \"DONE\";\n"
        fncall2 = "\tstring_serializer(&b, res);\n"
    fnbody = ("\tstruct Buffer_info b;\n"
                "\tb.buf = (char*) malloc(1);\n"
                "\tb.buf_len = 0;\n"
                + fncall2 + 
                "\tRPCSTUBSOCKET->write(b.buf, b.buf_len);\n")
    fnlocalcall = "void __" + typeOfType + "(" + argstring + ") " + OPEN + fncall + fnbody + CLOSE
    f.write('%s\n' % fnlocalcall)

if __name__ == "__main__":
    run()
    



